import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model
from keras.layers import Input, Dense
import parsing
import os

path = '/media/tan/8124db8a-fb2a-45fd-843b-88777c579f0e/tanushri/pycharm/arterys/final_data'


a = Input(shape=(32,))
b = Dense(32)(a)
model = Model(inputs=a, outputs=b)


data_gen_args = dict(featurewise_center=True,
                     featurewise_std_normalization=True,
                     rotation_range=90,
                     width_shift_range=0.1,
                     height_shift_range=0.1,
                     zoom_range=0.2)

image_datagen = ImageDataGenerator(**data_gen_args)
mask_datagen = ImageDataGenerator(**data_gen_args)

# Get the images and masks from
images = parsing.parse_dicom_file(path)
masks = parsing.parse_contour_file(path)

# Provide the same seed and keyword arguments to the fit and flow methods
seed = 1
image_datagen.fit(images, augment=True, seed=seed)
mask_datagen.fit(masks, augment=True, seed=seed)


image_generator = image_datagen.flow_from_directory(
    '/final_data/dicoms/',
    class_mode=None,
    seed=seed)

mask_generator = mask_datagen.flow_from_directory(
    '/final_data/contour_files/',
    class_mode=None,
    seed=seed)

# combine generators into one which yields image and masks
train_generator = zip(image_generator, mask_generator)

# Fit the model on the batches generated by datagen.flow()
model.fit_generator(
    train_generator,
    steps_per_epoch=2000,
    epochs=50)
